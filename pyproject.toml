[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cursorrules-mcp"
dynamic = ["version"]
description = "Intelligent rule-based context management for LLMs via Model Context Protocol"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [
    { name = "Mapoet", email = "mapoet.niphy@gmail.com" },
]
keywords = [
    "llm",
    "mcp",
    "model-context-protocol", 
    "cursor",
    "rules",
    "ai-assistance",
    "code-generation",
    "documentation"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]

dependencies = [
    # Core framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database and storage
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.9",
    "redis>=5.0.1",
    
    # Vector database and search
    "chromadb>=0.4.18",
    "elasticsearch>=8.11.0",
    "sentence-transformers>=2.2.2",
    
    # MCP protocol
    "mcp>=0.3.0",
    "websockets>=12.0",
    
    # LLM integration
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "litellm>=1.10.0",
    
    # Data processing
    "pyyaml>=6.0.1",
    "jsonschema>=4.20.0",
    "pandas>=2.1.4",
    "numpy>=1.24.0",
    
    # HTTP and networking
    "httpx>=0.25.2",
    "aiofiles>=23.2.1",
    
    # Utilities
    "rich>=13.7.0",
    "typer>=0.9.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",  # for testing FastAPI
    
    # Code quality
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    
    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
    
    # Development tools
    "ipython>=8.17.2",
    "jupyter>=1.0.0",
    "notebook>=7.0.6",
]

deployment = [
    "gunicorn>=21.2.0",
    "docker>=6.1.3",
    "kubernetes>=28.1.0",
    "prometheus-client>=0.19.0",
]

[project.urls]
Homepage = "https://github.com/cursorrules-mcp/cursorrules-mcp"
Documentation = "https://cursorrules-mcp.readthedocs.io"
Repository = "https://github.com/cursorrules-mcp/cursorrules-mcp"
Issues = "https://github.com/cursorrules-mcp/cursorrules-mcp/issues"

[project.scripts]
cursorrules-mcp = "cursorrules_mcp.cli:sync_main"
cursorrules-mcp-server = "scripts.start_mcp:main"
cursorrules-mcp-http = "scripts.start_http_server:main"

[tool.hatch.version]
path = "src/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/cursorrules_mcp"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cursorrules_mcp"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "elasticsearch.*",
    "mcp.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 